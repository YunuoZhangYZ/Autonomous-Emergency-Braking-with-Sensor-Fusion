function [scenario, egoVehicle, egoData, targetData] = helperCreateSeedScenario()
% helperCreateSeedScenario Returns the drivingScenario defined in the
% Designer
%
% Generated by MATLAB(R) 9.13 (R2022b) and Automated Driving Toolbox 3.5
% (R2022b). Generated on: 24-May-2022 16:04:57
% 
% Car-to-Pedestrian Nearside Child (CPNC) â€“ a collision in which a vehicle
% travels forwards towards a child pedestrian crossing its path running
% from behind and obstruction from the nearside and the frontal structure
% of the vehicle strikes the pedestrian at left most portion of the
% vehicle's width when no braking action is applied.
%
% This is a helper function for example purposes and may be modified in the
% future.

% Copyright 2022 The MathWorks, Inc.

% Construct a drivingScenario object.
scenario = drivingScenario();

% Add all road segments
roadCenters = [0 0 0;
    1000 0 0];
marking = [laneMarking('Unmarked')
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('Dashed')];
laneSpecification = lanespec(3, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [11 0 0], ...
    'FrontOverhang', 0.9, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 0 255] / 255, ...
    'Name', 'Vehicle Under Test');
egoWaypoints = [11 0 0;
    66 0 0;
    200 0 0];
egoSpeedVector = [16.6667;16.6667;16.6667];
waittime = [0;0;0];
trajectory(egoVehicle, egoWaypoints, egoSpeedVector, waittime);

% Add the actors
euroncappedestriantarget = actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.298, ...
    'Height', 1.154, ...
    'Position', [131.499999188653 -6 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [162 20 47] / 255, ...
    'Name', 'Euro NCAP Pedestrian Target');
targetWaypoints = [131.499999188653 -6 0;
    131.5 -3 0;
    131.5 10 0];
targetSpeedVector = [0;1.39;1.39];
trajectory(euroncappedestriantarget, targetWaypoints, targetSpeedVector);

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [121.32 -3.43 0], ...
    'FrontOverhang', 0.9, ...
    'Wheelbase', 2.8, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Large Obstruction Vehicle');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Length', 4.4, ...
    'Position', [127.48 -3.44 0], ...
    'FrontOverhang', 0.600000000000001, ...
    'Wheelbase', 2.8, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [230 230 48] / 255, ...
    'Name', 'Small Obstruction Vehicle');

egoID = egoVehicle.ActorID;
targetID = euroncappedestriantarget.ActorID;
egoYaw = [0;0;0];
egoData = struct(id=egoID,speed=egoSpeedVector, ...
    waypoints=egoWaypoints,yaw=egoYaw);

targetYaw = [90;90;90];
targetData = struct(id=targetID,speed=targetSpeedVector, ...
    waypoints=targetWaypoints,yaw=targetYaw);
